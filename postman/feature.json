{
	"info": {
		"_postman_id": "67a719c2-8d8d-45b8-9e05-624fd9b69284",
		"name": "Test Explore With Me - Feature location processing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17599026"
	},
	"item": [
		{
			"name": "Добавление локации",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let location;\r",
							"    try {\r",
							"        location = api.getLocation();\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(location),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.collectionVariables.set('locid', jsonData.id);",
							"",
							"let requestData = JSON.parse(pm.request.body.raw);",
							"",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);   ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Параметры ответа должны быть корректными\", function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData).to.have.property('area');",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('number');",
							"    pm.expect(jsonData).to.have.property('title').that.is.a('string');",
							"    pm.expect(jsonData).to.have.property('area').that.is.a('string');",
							"});",
							"",
							"pm.test(\"Поля ответа должны соответствовать переданным в запросе\", function () {",
							"    pm.expect(jsonData.title).equal(requestData.title);",
							"    pm.expect(jsonData.id.toString()).to.eql(pm.collectionVariables.get('locid').toString());",
							"    pm.expect(jsonData.area).to.eql('SRID=4326;' + requestData.area);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации с title.length > 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let location;\r",
							"    try {\r",
							"        location = api.getLocation();\r",
							"        location.title = api.getWord(201);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(location),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации с title.length < 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let location;\r",
							"    try {\r",
							"        location = api.getLocation();\r",
							"        location.title = api.getWord(0);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(location),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации без поля title",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let location;\r",
							"    try {\r",
							"        location = api.getLocation();\r",
							"        location.title = null;\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(location),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление локации без поля area",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let location;\r",
							"    try {\r",
							"        location = api.getLocation();\r",
							"        location.area = null;\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(location),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование локации",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let newLocation;\r",
							"    try {\r",
							"        let location = await api.addLocation(api.getLocation());\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"        newLocation = api.getLocation();\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(newLocation),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"let requestData = JSON.parse(pm.request.body.raw);",
							"",
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
							"    pm.response.to.have.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})",
							"",
							"pm.test('Параметры ответа должны быть корректными', function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData).to.have.property('area');",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('number');",
							"    pm.expect(jsonData).to.have.property('title').that.is.a('string');",
							"    pm.expect(jsonData).to.have.property('area').that.is.a('string');",
							"})",
							"",
							"pm.test(\"Поля ответа должны соответствовать переданным в запросе\", function () {",
							"    pm.expect(jsonData.title).to.eql(requestData.title);",
							"    pm.expect(jsonData.id.toString()).to.eql(pm.collectionVariables.get('locid').toString());",
							"    pm.expect(jsonData.area).to.eql('SRID=4326;' + requestData.area);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование локации с title.length > 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let newLocation;\r",
							"    try {\r",
							"        let location = await api.addLocation(api.getLocation());\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"        newLocation = api.getLocation();\r",
							"        newLocation.title = api.getWord(201);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(newLocation),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование локации с title.length < 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let newLocation;\r",
							"    try {\r",
							"        let location = await api.addLocation(api.getLocation());\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"        newLocation = api.getLocation();\r",
							"        newLocation.title = api.getWord(0);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(newLocation),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование локации с несуществующим id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    let location;\r",
							"    try {\r",
							"        location = api.getLocation();\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(location),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение локации по идентификатору",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {\r",
							"    pm.response.to.have.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"pm.test('Параметры ответа должны быть корректными', function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('area');\r",
							"    pm.expect(jsonData).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(jsonData).to.have.property('title').that.is.a('string');\r",
							"    pm.expect(jsonData).to.have.property('area').that.is.a('string');\r",
							"})\r",
							"\r",
							"pm.test(\"Поля ответа должны соответствовать переданным в запросе\", function () {\r",
							"    pm.expect(jsonData.id.toString()).to.eql(pm.collectionVariables.get('locid').toString());\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    try {\r",
							"        let location = await api.addLocation(api.getLocation());\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение локации по несуществующему id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка локаций с пагинацией",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Локации должны содержать поля: id, name, email\", function () {\r",
							"    pm.expect(jsonData[0]).to.have.property('id');\r",
							"    pm.expect(jsonData[0]).to.have.property('title');\r",
							"    pm.expect(jsonData[0]).to.have.property('area');\r",
							"    pm.expect(jsonData[0]).to.have.property('id').that.is.a('number');\r",
							"    pm.expect(jsonData[0]).to.have.property('title').that.is.a('string');\r",
							"    pm.expect(jsonData[0]).to.have.property('area').that.is.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Должна быть найдена только одна локация по заданному фильтру\", function () {\r",
							"    pm.expect(jsonData.length).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(jsonData[0].id).equal(pm.collectionVariables.get(\"locid\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    try {\r",
							"        let location = await api.addLocation(api.getLocation());\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations?ids={{locid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка локаций со значениями по умолчанию from, size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"const source = pm.collectionVariables.get('source_collection');\r",
							"\r",
							"pm.test(\"Значение from по-умолчанию должно быть равным 0\", function () {\r",
							"    pm.expect(target[0].id).to.be.equal(source[0].id, 'Запросы с from=0 и без него должны начинаться с одного и того же события');\r",
							"});\r",
							"\r",
							"pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
							"    pm.expect(target.length).to.be.equal(10);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    try {\r",
							"        for (let i = 0; i < 11; i++){\r",
							"            let location = await api.addLocation(api.getLocation());\r",
							"            pm.collectionVariables.set('locid', location.id);\r",
							"        }\r",
							"        await pm.sendRequest({\r",
							"            url : \"http://localhost:8080/admin/locations\",\r",
							"            method : \"GET\",\r",
							"            header: { \"Content-Type\": \"application/json\" }\r",
							"        }, (error, response) => {pm.collectionVariables.set('source_collection', response.json())});\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка локаций с некорректными значениями fom, size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations?from=-1&size=-1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations"
					],
					"query": [
						{
							"key": "from",
							"value": "-1"
						},
						{
							"key": "size",
							"value": "-1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление локации",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    try {\r",
							"        const location = await api.addLocation(api.getLocation());\r",
							"        const foundLocation = await api.findLocation(location.id);\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"        pm.collectionVariables.set('response', foundLocation)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const locId = pm.collectionVariables.get('locid');\r",
							"\r",
							"pm.test(\"Локация должна быть найдена до выполнения запроса\", function(){\r",
							"    pm.expect(source.id).to.eql(locId);\r",
							"});\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8080/admin/locations/\" + pm.collectionVariables.get('locid'),\r",
							"                method: \"GET\",\r",
							"                body: body == null ? \"\" : JSON.stringify(body),\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Локация должна быть удалена после выполнения запроса\", function(){\r",
							"        pm.expect(response.json().error);\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление локации по несуществующему id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/locations/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"locations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий с фильтрацией по идентификаторам локации",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    try {\r",
							"        let locationBody = api.getLocation();\r",
							"        locationBody.title = pm.variables.replaceIn('{{$randomCity}}');\r",
							"        let x = parseFloat(pm.variables.replaceIn('{{$randomLatitude}}'));\r",
							"        let y = parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'));\r",
							"        locationBody.area = 'POLYGON((' + y + ' ' + x + ','\r",
							"            + parseFloat(y + 0.1) + ' ' + x + ',' +\r",
							"            + parseFloat(y + 0.1) + ' ' + parseFloat(x + 0.1) + ',' + \r",
							"            + y + ' ' + parseFloat(x + 0.1) + ',' + \r",
							"            + y + ' ' + x + '))';\r",
							"        let location = await api.addLocation(locationBody);\r",
							"        pm.collectionVariables.set('locid', location.id);\r",
							"        \r",
							"        const user = await api.addUser(api.getUser());\r",
							"        const category = await api.addCategory(api.getCategory());\r",
							"        let eventBody = api.getEvent(category.id)\r",
							"        eventBody.location.lat = x + 0.05;\r",
							"        eventBody.location.lon = y + 0.05;\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set('response', event);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const jsonData = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.length(1);\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('annotation');\r",
							"    pm.expect(jsonData).to.have.property('category');\r",
							"    pm.expect(jsonData).to.have.property('paid');\r",
							"    pm.expect(jsonData).to.have.property('eventDate');\r",
							"    pm.expect(jsonData).to.have.property('initiator');\r",
							"    pm.expect(jsonData).to.have.property('views');\r",
							"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(jsonData.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
							"    pm.expect(source.category.id).equal(jsonData.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
							"    pm.expect(source.paid.toString()).equal(jsonData.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
							"    pm.expect(source.eventDate).equal(jsonData.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
							"    pm.expect(source.title).equal(jsonData.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events?locations={{locid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "locations",
							"value": "{{locid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение событий с фильтрацией по произвольной локации",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"\r",
							"    try {\r",
							"        let x = parseFloat(pm.variables.replaceIn('{{$randomLatitude}}'));\r",
							"        let y = parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'));\r",
							"        let area = 'POLYGON((' + y + ' ' + x + ','\r",
							"            + parseFloat(y + 0.1) + ' ' + x + ',' +\r",
							"            + parseFloat(y + 0.1) + ' ' + parseFloat(x + 0.1) + ',' + \r",
							"            + y + ' ' + parseFloat(x + 0.1) + ',' + \r",
							"            + y + ' ' + x + '))';\r",
							"\r",
							"        const user = await api.addUser(api.getUser());\r",
							"        const category = await api.addCategory(api.getCategory());\r",
							"        let eventBody = api.getEvent(category.id)\r",
							"        eventBody.location.lat = x + 0.05;\r",
							"        eventBody.location.lon = y + 0.05;\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"\r",
							"        pm.collectionVariables.set('response', event);\r",
							"        pm.request.removeQueryParams(['areas']);\r",
							"        pm.request.addQueryParams([`areas=` + area.replaceAll(',', 'comma')]);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const jsonData = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.length(1);\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('annotation');\r",
							"    pm.expect(jsonData).to.have.property('category');\r",
							"    pm.expect(jsonData).to.have.property('paid');\r",
							"    pm.expect(jsonData).to.have.property('eventDate');\r",
							"    pm.expect(jsonData).to.have.property('initiator');\r",
							"    pm.expect(jsonData).to.have.property('views');\r",
							"    pm.expect(jsonData).to.have.property('confirmedRequests');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.annotation).equal(jsonData.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
							"    pm.expect(source.category.id).equal(jsonData.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
							"    pm.expect(source.paid.toString()).equal(jsonData.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
							"    pm.expect(source.eventDate).equal(jsonData.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
							"    pm.expect(source.title).equal(jsonData.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addLocation(location, verbose=null) {\r",
					"        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"\r",
					"    async findLocation(id, verbose=null) {\r",
					"        return this.get('/admin/locations/' + id, null, \"Ошибка при поиске локации по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"     async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getLocation() {\r",
					"        let upperLeftCornerLat = parseFloat(pm.variables.replaceIn('{{$randomLatitude}}'));\r",
					"        let upperLeftCornerLon = parseFloat(pm.variables.replaceIn('{{$randomLongitude}}'));\r",
					"\r",
					"        let bottomRightCornerLat = upperLeftCornerLat + 10;\r",
					"        let bottomRightCornerLon = upperLeftCornerLon - 10;\r",
					"\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomCity}}'),\r",
					"            area: pm.variables.replaceIn(\"POLYGON((\" + upperLeftCornerLon + \" \" + upperLeftCornerLat + \",\"\r",
					"            + bottomRightCornerLon + \" \" + upperLeftCornerLat + \",\"\r",
					"            + bottomRightCornerLon + \" \" + bottomRightCornerLat + \",\"\r",
					"            + upperLeftCornerLon + \" \" + bottomRightCornerLat + \",\"\r",
					"            + upperLeftCornerLon + \" \" + upperLeftCornerLat + \"))\"),\r",
					"        };\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "locid",
			"value": "1"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "request_body",
			"value": "",
			"type": "string"
		},
		{
			"key": "source",
			"value": "",
			"type": "string"
		},
		{
			"key": "source_collection",
			"value": "",
			"type": "string"
		}
	]
}